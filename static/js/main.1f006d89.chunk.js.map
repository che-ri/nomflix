{"version":3,"sources":["asset/no_poster.png","Components/Header.js","api.js","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["StyledHeader","styled","header","StyledList","ul","StyledItem","li","props","current","StyledLink","Link","withRouter","pathname","location","to","api","axios","create","baseURL","params","api_key","language","moviesApi","get","id","append_to_response","term","query","tvApi","Container","div","Title","span","Grid","Section","title","children","Loader","role","aria-label","Text","color","Message","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","imageUrl","rating","year","isMovie","no_poster","HomePresenter","nowPlaying","upcoming","popular","error","loading","Helmet","length","map","movie","poster_path","vote_average","release_date","substring","HomeContainer","state","a","data","results","this","setState","console","log","React","Component","TVPresenter","topRated","airingToday","show","name","first_air_date","TVContainer","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","event","preventDefault","searchByTerm","target","Backdrop","bgImage","Content","Cover","Data","h3","ItemContainer","Item","Divider","Overview","p","Homepage","Homelogo","DetailPresenter","result","backdrop_path","require","default","runtime","episode_run_time","genres","genre","idx","href","imdb_id","homepage","class","xmlns","width","height","viewBox","version","fill","x","y","rx","transform","fill-rule","points","d","overview","DetailContainer","includes","match","push","history","parsedId","parseInt","isNaN","path","exact","component","Home","TV","Search","Detail","from","GlobalStyle","createGlobalStyle","reset","App","GlobalStyles","Router","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f006d89.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/no_poster.115be7c0.png\";","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Header = ({ location: { pathname } }) => {\n    return (\n        <StyledHeader>\n            <StyledList>\n                <StyledItem current={pathname === \"/\"}>\n                    <StyledLink to=\"/\">Movie</StyledLink>\n                </StyledItem>\n                <StyledItem current={pathname === \"/tv\"}>\n                    <StyledLink to=\"/tv\">TV</StyledLink>\n                </StyledItem>\n                <StyledItem current={pathname === \"/search\"}>\n                    <StyledLink to=\"/search\">Search</StyledLink>\n                </StyledItem>\n            </StyledList>\n        </StyledHeader>\n    );\n};\n\nconst StyledHeader = styled.header`\n    color: white;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 50px;\n    display: flex;\n    align-items: center;\n    padding: 0 10px;\n    background-color: rgba(20, 20, 20, 0.8);\n    z-index: 10;\n    box-shadow: 0 1px 5px 2px rgba(0, 0, 0, 0.8);\n`;\n\nconst StyledList = styled.ul`\n    display: flex;\n`;\n\nconst StyledItem = styled.li`\n    width: 50px;\n    height: 50px;\n    text-align: center;\n    border-bottom: 5px solid\n        ${props => (props.current ? \"#3498db\" : \"transparent\")};\n    transition: border-bottom 0.5s ease-in-out;\n`;\n\nconst StyledLink = styled(Link)`\n    display: block;\n    line-height: 50px;\n`;\n\nexport default withRouter(Header);\n","import axios from \"axios\";\n\nconst api = axios.create({\n    baseURL: \"https://api.themoviedb.org/3/\",\n    params: {\n        api_key: \"666b8461a61091018ee72bff00f403d7\",\n        language: \"ko\",\n    },\n});\n\nexport const moviesApi = {\n    //  /movie/now_playing 처럼 movie앞에 /(슬래시)를 넣으면, 절대경로가 되어서 기존 url을 덮어쓰기하게 된다.\n    //  그러니 꼭!! /(슬래시)가 없는 상대경로로 설정하기!!\n    nowPlaying: () => api.get(\"movie/now_playing\"),\n    upcoming: () => api.get(\"movie/upcoming\"),\n    popular: () => api.get(\"movie/popular\"),\n    movieDetail: (id) =>\n        api.get(`movie/${id}`, {\n            params: {\n                append_to_response: \"videos\",\n            },\n        }),\n    search: (term) =>\n        api.get(\"search/movie\", {\n            params: {\n                query: term,\n            },\n        }),\n};\n\nexport const tvApi = {\n    topRated: () => api.get(\"tv/top_rated\"),\n    popular: () => api.get(\"tv/popular\"),\n    airingToday: () => api.get(\"tv/airing_today\"),\n    showDetail: (id) => api.get(`tv/${id}`),\n    search: (term) =>\n        api.get(\"search/tv\", {\n            params: {\n                query: term,\n            },\n        }),\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    :not(:last-child) {\n        margin-bottom: 50px;\n    }\n`;\n\nconst Title = styled.span`\n    font-size: 1rem;\n    font-weight: 600;\n`;\nconst Grid = styled.div`\n    margin-top: 25px;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, 125px);\n    gap: 25px;\n`;\n\nconst Section = ({ title, children }) => {\n    return (\n        <Container>\n            <Title>{title}</Title>\n            <Grid>{children}</Grid>\n        </Container>\n    );\n};\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node,\n    ]),\n};\n\nexport default Section;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Loader = () => (\n    <Container>\n        <span role=\"img\" aria-label=\"Loading\">\n            로딩중 🐢\n        </span>\n    </Container>\n);\n\nconst Container = styled.div`\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    justify-content: center;\n    font-size: 14px;\n    padding-top: 20px;\n`;\n\nexport default Loader;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Message = ({ text, color }) => {\n    return (\n        <Container>\n            <Text>{text}</Text>\n        </Container>\n    );\n};\n\nMessage.propTypes = {\n    text: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n};\n\nconst Container = styled.div`\n    width: 100vw;\n    display: flex;\n    justify-content: center;\n`;\n\nconst Text = styled.span`\n    color: ${props => props.color};\n    font-weight: 600;\n`;\n\nexport default Message;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport no_poster from \"asset/no_poster.png\";\n\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => {\n    return (\n        <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\n            <Container>\n                <ImageContainer>\n                    <Image\n                        bgUrl={\n                            imageUrl\n                                ? `https://image.tmdb.org/t/p/w300/${imageUrl}`\n                                : no_poster\n                        }\n                    />\n                    <Rating>\n                        <span role=\"img\" aria-label=\"rating\">\n                            ⭐\n                        </span>\n                        {rating}/10\n                    </Rating>\n                </ImageContainer>\n                <Title>{title}</Title>\n                <Year>{year}</Year>\n            </Container>\n        </Link>\n    );\n};\n\nPoster.propTypes = {\n    id: PropTypes.number.isRequired,\n    imageUrl: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    rating: PropTypes.number,\n    year: PropTypes.string,\n    isMovie: PropTypes.bool,\n};\n\nconst Image = styled.div`\n    background: url(${props => props.bgUrl});\n    height: 180px;\n    background-size: cover;\n    border-radius: 4px;\n    background-position: center center;\n    transition: opacity 0.1s linear;\n`;\n\nconst Rating = styled.span`\n    position: absolute;\n    bottom: 5px;\n    right: 5px;\n    opacity: 0;\n    transition: opacity 0.1s linear;\n`;\n\nconst ImageContainer = styled.div`\n    position: relative;\n    margin-bottom: 5px;\n    &:hover {\n        ${Image} {\n            opacity: 0.3;\n        }\n        ${Rating} {\n            opacity: 1;\n        }\n    }\n`;\n\nconst Container = styled.div`\n    font-size: 12px;\n`;\n\nconst Title = styled.span`\n    display: block;\n    margin-bottom: 3px;\n\n    //width에 넘치는 문자는 잘라내기\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`;\nconst Year = styled.span`\n    font-size: 10px;\n    color: rgba(255, 255, 255, 0.5);\n`;\n\nexport default Poster;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Helmet from \"react-helmet\";\n\n//컴포넌트\nimport Section from \"Components/Section\";\nimport Loader from \"Components/Loader\";\nimport Message from \"Components/Message\";\nimport Poster from \"Components/Poster\";\n\nconst HomePresenter = ({ nowPlaying, upcoming, popular, error, loading }) => (\n    //마운트가 끝나기 전까지는 nowPlaying, upcoming, popular 값이 생성되지 않기 때문에\n    //마운트가 끝나는 시점! 말 그대로 loading이 false가 될때 위의 값을 사용하도록 설정한다.\n    //null 값을 사용하면 아무것도 렌더링하지 않는다.\n    <>\n        <Helmet>\n            <title>Movies | Nomflix</title>\n        </Helmet>\n        {loading ? (\n            <Loader />\n        ) : (\n            <Container>\n                {nowPlaying && nowPlaying.length > 0 && (\n                    <Section title=\"Now Playing\">\n                        {nowPlaying.map((movie) => (\n                            <Poster\n                                key={movie.id}\n                                id={movie.id}\n                                title={movie.title}\n                                imageUrl={movie.poster_path}\n                                rating={movie.vote_average}\n                                isMovie={true}\n                                year={\n                                    movie.release_date &&\n                                    movie.release_date.substring(0, 4)\n                                }\n                            ></Poster>\n                        ))}\n                    </Section>\n                )}\n                {upcoming && upcoming.length > 0 && (\n                    <Section title=\"Upcoming Movies\">\n                        {upcoming.map((movie) => (\n                            <Poster\n                                key={movie.id}\n                                id={movie.id}\n                                title={movie.title}\n                                imageUrl={movie.poster_path}\n                                rating={movie.vote_average}\n                                isMovie={true}\n                                year={\n                                    movie.release_date &&\n                                    movie.release_date.substring(0, 4)\n                                }\n                            ></Poster>\n                        ))}\n                    </Section>\n                )}\n                {popular && popular.length > 0 && (\n                    <Section title=\"popular Movies\">\n                        {popular.map((movie) => (\n                            <Poster\n                                key={movie.id}\n                                id={movie.id}\n                                title={movie.title}\n                                imageUrl={movie.poster_path}\n                                rating={movie.vote_average}\n                                isMovie={true}\n                                year={\n                                    movie.release_date &&\n                                    movie.release_date.substring(0, 4)\n                                }\n                            ></Poster>\n                        ))}\n                    </Section>\n                )}\n                {error && <Message text={error} />}\n            </Container>\n        )}\n    </>\n);\n\nHomePresenter.propTypes = {\n    nowPlaying: PropTypes.array,\n    upcoming: PropTypes.array,\n    popular: PropTypes.array,\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n};\n\nconst Container = styled.div`\n    padding: 20px;\n`;\n\nexport default HomePresenter;\n","import HomeContainer from './HomeContainer';\n\nexport default HomeContainer;\n","import { moviesApi } from \"api\";\nimport React from \"react\";\nimport HomePresenter from \"./HomePresenter\";\n\nexport default class extends React.Component {\n    state = {\n        nowPlaying: null,\n        upcoming: null,\n        popular: null,\n        loading: true,\n        error: null,\n    };\n\n    //호출해야될 api동작들이 많다면 따로 밖에서 함수를 만들어서 componentDidMount 함수 안에 this.함수명 으로 넣어주어도 된다!\n    async componentDidMount() {\n        try {\n            //비구조화할당 후 nowPlaying으로 명시하기!\n            const {\n                data: { results: nowPlaying },\n            } = await moviesApi.nowPlaying();\n            const {\n                data: { results: upcoming },\n            } = await moviesApi.upcoming();\n            const {\n                data: { results: popular },\n            } = await moviesApi.popular();\n            this.setState({\n                nowPlaying,\n                upcoming,\n                popular,\n            });\n        } catch {\n            this.setState({\n                error: \"영화정보를 불러올 수 없어요!\",\n            });\n        } finally {\n            this.setState({\n                loading: false,\n            });\n        }\n    }\n    render() {\n        console.log(this.state);\n        const { nowPlaying, upcoming, popular, error, loading } = this.state;\n        return (\n            <HomePresenter\n                nowPlaying={nowPlaying}\n                upcoming={upcoming}\n                popular={popular}\n                error={error}\n                loading={loading}\n            />\n        );\n    }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Helmet from \"react-helmet\";\n\n//컴포넌트\nimport Section from \"Components/Section\";\nimport Loader from \"Components/Loader\";\nimport Error from \"Components/Message\";\nimport Poster from \"Components/Poster\";\n\nconst TVPresenter = ({ topRated, popular, airingToday, error, loading }) => (\n    <>\n        <Helmet>\n            <title>TV Shows | Nomflix</title>\n        </Helmet>\n        {loading ? (\n            <Loader />\n        ) : (\n            <Container>\n                {topRated && topRated.length > 0 && (\n                    <Section title=\"Top Rated Shows\">\n                        {topRated.map((show) => (\n                            <Poster\n                                key={show.id}\n                                id={show.id}\n                                title={show.name}\n                                imageUrl={show.poster_path}\n                                rating={show.vote_average}\n                                year={\n                                    show.first_air_date &&\n                                    show.first_air_date.substring(0, 4)\n                                }\n                            ></Poster>\n                        ))}\n                    </Section>\n                )}\n                {airingToday && airingToday.length > 0 && (\n                    <Section title=\"Airing Today\">\n                        {airingToday.map((show) => (\n                            <Poster\n                                key={show.id}\n                                id={show.id}\n                                title={show.name}\n                                imageUrl={show.poster_path}\n                                rating={show.vote_average}\n                                year={\n                                    show.first_air_date &&\n                                    show.first_air_date.substring(0, 4)\n                                }\n                            ></Poster>\n                        ))}\n                    </Section>\n                )}\n                {popular && popular.length > 0 && (\n                    <Section title=\"Popular Shows\">\n                        {popular.map((show) => (\n                            <Poster\n                                key={show.id}\n                                id={show.id}\n                                title={show.name}\n                                imageUrl={show.poster_path}\n                                rating={show.vote_average}\n                                year={\n                                    show.first_air_date &&\n                                    show.first_air_date.substring(0, 4)\n                                }\n                            ></Poster>\n                        ))}\n                    </Section>\n                )}\n                {error && <Error text={error} />}\n            </Container>\n        )}\n    </>\n);\n\n//필수 정보는 error!\nTVPresenter.propTypes = {\n    topRated: PropTypes.array,\n    popular: PropTypes.array,\n    airingToday: PropTypes.array,\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n};\n\nconst Container = styled.div`\n    padding: 20px;\n`;\n\nexport default TVPresenter;\n","import TVContainer from './TVContainer';\nexport default TVContainer;\n","import { tvApi } from \"api\";\nimport React from \"react\";\nimport TVPresenter from \"./TVPresenter\";\n\nexport default class extends React.Component {\n    state = {\n        topRated: null,\n        popular: null,\n        airingToday: null,\n        loading: true,\n        error: null,\n    };\n\n    async componentDidMount() {\n        try {\n            const {\n                data: { results: topRated },\n            } = await tvApi.topRated();\n            const {\n                data: { results: popular },\n            } = await tvApi.topRated();\n            const {\n                data: { results: airingToday },\n            } = await tvApi.topRated();\n            this.setState({ topRated, popular, airingToday });\n        } catch {\n            this.setState({ error: \"TV프로그램 정보를 불러올 수 없어요!\" });\n        } finally {\n            this.setState({ loading: false });\n        }\n    }\n\n    render() {\n        const { topRated, popular, airingToday, error, loading } = this.state;\n        return (\n            <TVPresenter\n                topRated={topRated}\n                popular={popular}\n                airingToday={airingToday}\n                error={error}\n                loading={loading}\n            />\n        );\n    }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Helmet from \"react-helmet\";\n\n//컴포넌트\nimport Loader from \"Components/Loader\";\nimport Section from \"Components/Section\";\nimport Message from \"Components/Message\";\nimport Poster from \"Components/Poster\";\n\nconst SearchPresenter = ({\n    movieResults,\n    tvResults,\n    loading,\n    searchTerm,\n    handleSubmit,\n    error,\n    updateTerm,\n}) => (\n    <>\n        <Helmet>\n            <title>Search | Nomflix</title>\n        </Helmet>\n        <Container>\n            <Form onSubmit={handleSubmit}>\n                <Input\n                    placeholder=\"Search Movies or TV Shows...\"\n                    value={searchTerm}\n                    onChange={updateTerm}\n                />\n            </Form>\n            {loading ? (\n                <Loader />\n            ) : (\n                <>\n                    {movieResults && movieResults.length > 0 && (\n                        <Section title=\"Movie Results\">\n                            {movieResults.map(movie => (\n                                <Poster\n                                    key={movie.id}\n                                    id={movie.id}\n                                    title={movie.title}\n                                    imageUrl={movie.poster_path}\n                                    rating={movie.vote_average}\n                                    isMovie={true}\n                                    year={\n                                        movie.release_date &&\n                                        movie.release_date.substring(0, 4)\n                                    }\n                                ></Poster>\n                            ))}\n                        </Section>\n                    )}\n                    {tvResults && tvResults.length > 0 && (\n                        <Section title=\"TV Show Results\">\n                            {tvResults.map(show => (\n                                <Poster\n                                    key={show.id}\n                                    id={show.id}\n                                    title={show.name}\n                                    imageUrl={show.poster_path}\n                                    rating={show.vote_average}\n                                    year={\n                                        show.first_air_date &&\n                                        show.first_air_date.substring(0, 4)\n                                    }\n                                ></Poster>\n                            ))}\n                        </Section>\n                    )}\n                    {error && <Message color=\"#e74c3c\" text={error} />}\n                    {tvResults &&\n                        movieResults &&\n                        tvResults.length === 0 &&\n                        movieResults.length === 0 && (\n                            <Message\n                                text=\"검색결과가 없어요!\"\n                                color=\"#95a5a6\"\n                            />\n                        )}\n                </>\n            )}\n        </Container>\n    </>\n);\n\nconst Container = styled.div`\n    padding: 20px;\n`;\n\nconst Form = styled.form`\n    margin-bottom: 50px;\n    width: 100%;\n`;\n\nconst Input = styled.input`\n    all: unset;\n    font-size: 28px;\n    width: 100%;\n`;\n\nSearchPresenter.propTypes = {\n    movieResults: PropTypes.array,\n    tvResults: PropTypes.array,\n    error: PropTypes.string,\n    searchTerm: PropTypes.string,\n    loading: PropTypes.bool.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n    updateTerm: PropTypes.func.isRequired,\n};\n\nexport default SearchPresenter;\n","import SearchContainer from './SearchContainer';\nexport default SearchContainer;\n","import React from \"react\";\nimport SearchPresenter from \"./SearchPresenter\";\nimport { moviesApi, tvApi } from \"../../api\";\nexport default class extends React.Component {\n    state = {\n        movieResults: null,\n        tvResults: null,\n        //searchTerm은 입력값이 담길 곳이다.\n        searchTerm: \"\",\n        loading: false,\n        error: null,\n    };\n\n    handleSubmit = event => {\n        event.preventDefault();\n        const { searchTerm } = this.state;\n        //만약에 검색내용이 빈 문자열이 아니라면 searchByTerm 함수 실행\n        if (searchTerm !== \"\") {\n            this.searchByTerm();\n        }\n    };\n\n    updateTerm = event => {\n        const {\n            target: { value },\n            //기존 이벤트 객체 안에 target:{value} 안에 input의 value가 담겨있다.\n        } = event;\n        this.setState({\n            searchTerm: value,\n            //value를 받아서 searchTerm에 저장한다.\n        });\n    };\n\n    searchByTerm = async () => {\n        const { searchTerm } = this.state;\n        this.setState({ loading: true });\n        // api.search()를 통해 searchTerm을 포함한 결과를 담습니다.\n        try {\n            const {\n                data: { results: movieResults },\n            } = await moviesApi.search(searchTerm);\n            const {\n                data: { results: tvResults },\n            } = await tvApi.search(searchTerm);\n            //결과값을 state에 저장합니다.\n            this.setState({\n                movieResults,\n                tvResults,\n            });\n        } catch {\n            this.setState({ error: \"에러가 났어요!\" });\n        } finally {\n            this.setState({ loading: false });\n        }\n    };\n    render() {\n        const { movieResults, tvResults, searchTerm, loading, error } =\n            this.state;\n        return (\n            <SearchPresenter\n                movieResults={movieResults}\n                tvResults={tvResults}\n                loading={loading}\n                error={error}\n                searchTerm={searchTerm}\n                handleSubmit={this.handleSubmit}\n                updateTerm={this.updateTerm}\n            />\n        );\n    }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Helmet from \"react-helmet\";\n\n//컴포넌트\nimport Loader from \"Components/Loader\";\nimport Message from \"Components/Message\";\n\nconst DetailPresenter = ({ result, error, loading }) => {\n    console.log(result);\n    return loading ? (\n        <>\n            <Helmet>\n                <title>Loading | Nomflix</title>\n            </Helmet>\n            <Loader />\n        </>\n    ) : error ? (\n        <Message />\n    ) : (\n        <>\n            <Helmet>\n                <title>\n                    {result.title ? result.title : result.name} | Nomflix\n                </title>\n            </Helmet>\n            <Container>\n                <Backdrop\n                    bgImage={`https://image.tmdb.org/t/p/original/${result.backdrop_path}`}\n                />\n                <Content>\n                    <Cover\n                        bgImage={\n                            result.poster_path\n                                ? `https://image.tmdb.org/t/p/original/${result.poster_path}`\n                                : require(\"../../asset/no_poster.png\").default\n                        }\n                    />\n                    <Data>\n                        <Title>\n                            {result.title ? result.title : result.name}\n                        </Title>\n                        <ItemContainer>\n                            <Item>\n                                {result.release_date\n                                    ? `${result.release_date.substring(0, 4)}년`\n                                    : `${result.first_air_date.substring(\n                                          0,\n                                          4\n                                      )}년`}\n                            </Item>\n                            {result.runtime ||\n                            result.episode_run_time.length > 0 ? (\n                                <Divider>•</Divider>\n                            ) : (\n                                \"\"\n                            )}\n                            <Item>\n                                {result.runtime\n                                    ? `${result.runtime}분`\n                                    : result.episode_run_time > 0\n                                    ? `${result.episode_run_time}분`\n                                    : \"\"}\n                            </Item>\n                            {result.runtime || result.episode_run_time ? (\n                                <Divider>•</Divider>\n                            ) : (\n                                \"\"\n                            )}\n                            <Item>\n                                {result.genres &&\n                                    result.genres.map((genre, idx) =>\n                                        //genres의 마지막 index만 글자뒤에 &를 붙이지 않기 위함!\n                                        idx === result.genres.length - 1\n                                            ? genre.name\n                                            : `${genre.name}/`\n                                    )}\n                            </Item>\n                            <Homepage\n                                href={\n                                    result.imdb_id\n                                        ? `https://www.imdb.com/title/${result.imdb_id}`\n                                        : result.homepage\n                                }\n                                target=\"_blank\"\n                            >\n                                {result.imdb_id ? (\n                                    <svg\n                                        id=\"home_img\"\n                                        class=\"ipc-logo\"\n                                        xmlns=\"http://www.w3.org/2000/svg\"\n                                        width=\"32\"\n                                        height=\"16\"\n                                        viewBox=\"0 0 64 32\"\n                                        version=\"1.1\"\n                                    >\n                                        <g fill=\"#F5C518\">\n                                            <rect\n                                                x=\"0\"\n                                                y=\"0\"\n                                                width=\"100%\"\n                                                height=\"100%\"\n                                                rx=\"4\"\n                                            ></rect>\n                                        </g>\n                                        <g\n                                            transform=\"translate(8.000000, 7.000000)\"\n                                            fill=\"#000000\"\n                                            fill-rule=\"nonzero\"\n                                        >\n                                            <polygon points=\"0 18 5 18 5 0 0 0\"></polygon>\n                                            <path d=\"M15.6725178,0 L14.5534833,8.40846934 L13.8582008,3.83502426 C13.65661,2.37009263 13.4632474,1.09175121 13.278113,0 L7,0 L7,18 L11.2416347,18 L11.2580911,6.11380679 L13.0436094,18 L16.0633571,18 L17.7583653,5.8517865 L17.7707076,18 L22,18 L22,0 L15.6725178,0 Z\"></path>\n                                            <path d=\"M24,18 L24,0 L31.8045586,0 C33.5693522,0 35,1.41994415 35,3.17660424 L35,14.8233958 C35,16.5777858 33.5716617,18 31.8045586,18 L24,18 Z M29.8322479,3.2395236 C29.6339219,3.13233348 29.2545158,3.08072342 28.7026524,3.08072342 L28.7026524,14.8914865 C29.4312846,14.8914865 29.8796736,14.7604764 30.0478195,14.4865461 C30.2159654,14.2165858 30.3021941,13.486105 30.3021941,12.2871637 L30.3021941,5.3078959 C30.3021941,4.49404499 30.272014,3.97397442 30.2159654,3.74371416 C30.1599168,3.5134539 30.0348852,3.34671372 29.8322479,3.2395236 Z\"></path>\n                                            <path d=\"M44.4299079,4.50685823 L44.749518,4.50685823 C46.5447098,4.50685823 48,5.91267586 48,7.64486762 L48,14.8619906 C48,16.5950653 46.5451816,18 44.749518,18 L44.4299079,18 C43.3314617,18 42.3602746,17.4736618 41.7718697,16.6682739 L41.4838962,17.7687785 L37,17.7687785 L37,0 L41.7843263,0 L41.7843263,5.78053556 C42.4024982,5.01015739 43.3551514,4.50685823 44.4299079,4.50685823 Z M43.4055679,13.2842155 L43.4055679,9.01907814 C43.4055679,8.31433946 43.3603268,7.85185468 43.2660746,7.63896485 C43.1718224,7.42607505 42.7955881,7.2893916 42.5316822,7.2893916 C42.267776,7.2893916 41.8607934,7.40047379 41.7816216,7.58767002 L41.7816216,9.01907814 L41.7816216,13.4207851 L41.7816216,14.8074788 C41.8721037,15.0130276 42.2602358,15.1274059 42.5316822,15.1274059 C42.8031285,15.1274059 43.1982131,15.0166981 43.281155,14.8074788 C43.3640968,14.5982595 43.4055679,14.0880581 43.4055679,13.2842155 Z\"></path>\n                                        </g>\n                                    </svg>\n                                ) : (\n                                    <Homelogo>HOME</Homelogo>\n                                )}\n                            </Homepage>\n                        </ItemContainer>\n                        <Overview>\n                            {result.overview\n                                ? result.overview\n                                : \"내용이 없어요!\"}\n                        </Overview>\n                    </Data>\n                </Content>\n            </Container>\n        </>\n    );\n};\n\nDetailPresenter.propTypes = {\n    result: PropTypes.object,\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n};\n\nconst Container = styled.div`\n    height: calc(100vh - 50px);\n    width: 100%;\n    position: relative;\n    padding: 50px;\n`;\n\nconst Backdrop = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-image: url(${props => props.bgImage});\n    background-position: center center;\n    background-size: cover;\n    filter: blur(3px);\n    opacity: 0.5;\n`;\n\nconst Content = styled.div`\n    display: flex;\n    width: 100%;\n    height: 100%;\n    position: relative;\n`;\n\nconst Cover = styled.div`\n    width: 30%;\n    height: 100%;\n    background-image: url(${props => props.bgImage});\n    background-position: center center;\n    background-size: cover;\n    border-radius: 5px;\n`;\n\nconst Data = styled.div`\n    width: 70%;\n    margin-left: 20px;\n`;\n\nconst Title = styled.h3`\n    font-size: 32px;\n    margin-bottom: 10px;\n`;\n\nconst ItemContainer = styled.div`\n    margin: 20px 0;\n    display: flex;\n    align-items: center;\n`;\n\nconst Item = styled.span``;\nconst Divider = styled.span`\n    margin: 0 10px;\n`;\n\nconst Overview = styled.p`\n    font-size: 12px;\n    opacity: 0.7;\n    line-height: 2;\n    width: 100%;\n`;\n\nconst Homepage = styled.a`\n    margin-left: 10px;\n`;\n\nconst Homelogo = styled.div`\n    background: #f5c518;\n    height: 16px;\n    padding: 0 3px;\n    border-radius: 3px;\n    font-size: 10px;\n    font-weight: 800;\n    line-height: 16px;\n    color: #000000;\n`;\n\nexport default DetailPresenter;\n","import DetailContainer from './DetailContainer';\nexport default DetailContainer;\n","import React from \"react\";\nimport DetailPresenter from \"./DetailPresenter\";\nimport { moviesApi, tvApi } from \"../../api\";\n\nexport default class extends React.Component {\n    constructor(props) {\n        super(props);\n        const {\n            location: { pathname },\n        } = props;\n        this.state = {\n            result: null,\n            error: null,\n            loading: true,\n            isMovie: pathname.includes(\"/movie/\"),\n        };\n    }\n\n    async componentDidMount() {\n        const {\n            match: {\n                params: { id },\n            },\n            history: { push },\n        } = this.props;\n        const { isMovie } = this.state;\n        const parsedId = parseInt(id);\n        //만약 쿼리스트링이 숫자형이 아니면 home 라우터인 \"/\"으로 보낸다.\n        if (isNaN(parsedId)) {\n            return push(\"/\");\n        }\n        let result = null;\n        try {\n            if (isMovie) {\n                ({ data: result } = await moviesApi.movieDetail(parsedId));\n            } else {\n                ({ data: result } = await tvApi.showDetail(parsedId));\n            }\n        } catch {\n            this.setState({ error: \"Can't find anything.\" });\n        } finally {\n            this.setState({ loading: false, result });\n        }\n    }\n\n    render() {\n        console.log(this.state);\n        const { result, error, loading } = this.state;\n        return (\n            <DetailPresenter result={result} error={error} loading={loading} />\n        );\n    }\n}\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\n\n//최종경로가 폴더면 폴더 안에 있는 index.js 파일에 접근한다.\nimport Header from 'Components/Header';\nimport Home from 'Routes/Home';\nimport TV from 'Routes/TV';\nimport Search from 'Routes/Search';\nimport Detail from 'Routes/Detail';\n\nexport default () => (\n  <Router>\n    <>\n      <Header />\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/tv\" exact component={TV} />\n        <Route path=\"/search\" exact component={Search} />\n        <Route path=\"/movie/:id\" exact component={Detail} />\n        <Route path=\"/show/:id\" exact component={Detail} />\n        {/* :id는 url들의 id가 들어갈 자리이다. 어떠한 값이 들어가도 상관없다. */}\n        <Redirect from=\"*\" to=\"/\" />\n      </Switch>\n    </>\n  </Router>\n);\n","import { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\n\nconst GlobalStyle = createGlobalStyle`\n  ${reset};\n  a{\n    text-decoration:none;\n    color:inherit\n  }\n  *{\n    box-sizing:border-box;\n  }\n  body{\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    font-size: 14px;\n    background-color: rgba(20,20,20,1);\n    color:white;\n    padding-top: 50px;\n  }\n\n\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport Router from 'Components/Router';\nimport GlobalStyles from 'Components/GlobalStyles';\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyles />\n      <Router />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'Components/App';\nimport './api';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}